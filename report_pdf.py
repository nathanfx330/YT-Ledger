# report_pdf.py

from fpdf import FPDF
from pathlib import Path
import logging
from datetime import datetime
import configparser # <-- Import configparser

class PDFReport(FPDF):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.report_title = ""
        self.project_name = ""
        self.show_watermark = True # Default

    def header(self):
        self.set_font("DejaVu", "B", 14)
        self.cell(0, 10, self.report_title, border=False, ln=1, align='C')
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        
        if self.show_watermark:
            generation_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            footer_text = f"Generated by {self.project_name} on {generation_date}"
            
            self.set_font('DejaVu', '', 8) # Regular font
            self.set_text_color(128, 128, 128) # Grey
            self.cell(0, 10, footer_text, 0, 0, 'L')
            
            self.set_text_color(0, 0, 0) # Black
            self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'R')
        else:
            self.set_font('DejaVu', 'I', 8) # Italic font
            self.set_text_color(0, 0, 0)
            self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def create_pdf_report(video_list, thumb_map, output_filename, report_title, project_name):
    if not video_list:
        logging.info("No video data to generate PDF report.")
        return
        
    logging.info("\nBuilding PDF report...")
    
    # --- RELIABLE CONFIG READING ---
    # The PDF module will now read the config for itself. This is the most robust way.
    config = configparser.ConfigParser()
    config.read('config.ini')
    show_footer_watermark = config.getboolean('outputs', 'show_footer_watermark', fallback=True)
    # --- END OF RELIABLE CONFIG READING ---

    pdf = PDFReport()
    
    # Set the properties on the instance AFTER creation
    pdf.report_title = report_title
    pdf.project_name = project_name
    pdf.show_watermark = show_footer_watermark

    # --- Font Setup ---
    base_dir = Path(__file__).parent
    font_dir = base_dir / 'fonts'
    try:
        pdf.add_font('DejaVu', '', str(font_dir / 'DejaVuSans.ttf'), uni=True)
        pdf.add_font('DejaVu', 'B', str(font_dir / 'DejaVuSans-Bold.ttf'), uni=True)
        pdf.add_font('DejaVu', 'I', str(font_dir / 'DejaVuSans-Oblique.ttf'), uni=True)
    except RuntimeError:
        logging.error(f"FPDF error: Could not load DejaVu fonts from '{font_dir}'. Using Arial fallback.")
    pdf.set_font('DejaVu', '', 12) # Set default font

    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    # --- Layout Constants ---
    LEFT_MARGIN = 10
    PAGE_WIDTH = pdf.w - LEFT_MARGIN * 2
    THUMB_WIDTH = 64
    THUMB_HEIGHT = 36
    
    BANNER_SPACING = 8
    BANNER_BG_COLOR = (242, 242, 242)
    CORNER_RADIUS = 3
    VERTICAL_PADDING = 3
    
    TEXT_BLOCK_X = LEFT_MARGIN + THUMB_WIDTH + 5
    text_block_width = PAGE_WIDTH - THUMB_WIDTH - 10
    
    MAX_DESC_CHARS = 90 

    for video_data in video_list:
        banner_height = THUMB_HEIGHT + (VERTICAL_PADDING * 2)

        if pdf.get_y() + banner_height > pdf.page_break_trigger:
            pdf.add_page()

        start_y = pdf.get_y()
        video_id = video_data.get('id')
        youtube_url = f"https://www.youtube.com/watch?v={video_id}"

        pdf.set_fill_color(*BANNER_BG_COLOR)
        try:
            pdf.rect(x=LEFT_MARGIN, y=start_y, w=PAGE_WIDTH, h=banner_height, 
                     style='F', round_corners=True, corner_radius=CORNER_RADIUS)
        except TypeError: 
            pdf.rect(x=LEFT_MARGIN, y=start_y, w=PAGE_WIDTH, h=banner_height, style='F')

        thumb_y = start_y + VERTICAL_PADDING
        thumb_path = thumb_map.get(video_id)
        if thumb_path and Path(thumb_path).exists():
            pdf.image(str(thumb_path), x=LEFT_MARGIN + 3, y=thumb_y, w=THUMB_WIDTH, h=THUMB_HEIGHT, link=youtube_url)
        else:
            pdf.set_xy(LEFT_MARGIN + 3, thumb_y)
            pdf.cell(THUMB_WIDTH, THUMB_HEIGHT, "No Thumbnail", border=1, align='C', link=youtube_url)

        pdf.set_xy(TEXT_BLOCK_X, start_y + VERTICAL_PADDING)
        
        pdf.set_font('DejaVu', 'B', 11)
        title = video_data.get('title', 'N/A')
        pdf.multi_cell(text_block_width, 5, title)
        
        pdf.set_x(TEXT_BLOCK_X)
        pdf.set_font('DejaVu', 'I', 9)
        channel_name = video_data.get('channel', 'N/A')
        pdf.cell(text_block_width, 6, f"By: {channel_name}", ln=1)

        pdf.set_x(TEXT_BLOCK_X)
        pdf.set_font('DejaVu', '', 9)
        pdf.cell(text_block_width, 6, f"Uploaded: {video_data.get('upload_date', 'N/A')}", ln=1)

        pdf.set_x(TEXT_BLOCK_X)
        pdf.set_font('DejaVu', '', 9)
        description = video_data.get('description', '')
        
        short_desc = (description[:MAX_DESC_CHARS] + "...") if len(description) > MAX_DESC_CHARS else description
        
        pdf.multi_cell(text_block_width, 4, short_desc)

        pdf.set_x(TEXT_BLOCK_X)
        pdf.set_font('DejaVu', '', 8)
        pdf.set_text_color(4, 58, 242)
        pdf.cell(text_block_width, 5, "Watch on YouTube", link=youtube_url)
        pdf.set_text_color(0, 0, 0)

        pdf.set_y(start_y + banner_height + BANNER_SPACING)

    try:
        pdf.output(str(output_filename))
        logging.info(f"✅ Success! PDF report saved as '{output_filename}'")
    except Exception as e:
        logging.error(f"❌ Error saving PDF file: {e}")
